<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-29T16:21:25+10:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">tristangriffiths.net</title><subtitle>The personal blog of Tristan Griffiths - IT Jebus</subtitle><entry><title type="html">Skype for Business (Lync) Web Services Warmup</title><link href="http://localhost:4000/call-statistics-sonus-ux-restful-api" rel="alternate" type="text/html" title="Skype for Business (Lync) Web Services Warmup" /><published>2015-09-13T00:00:00+10:00</published><updated>2015-09-13T00:00:00+10:00</updated><id>http://localhost:4000/skype-for-business-lync-web-services-warmup</id><content type="html" xml:base="http://localhost:4000/call-statistics-sonus-ux-restful-api">&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;

&lt;p&gt;This blog runs on Umbraco and due its popularity, or lack thereof, IIS was shutting down the application pool frequently. Not the best first impression if a visitor has to wait 10 seconds for the application to start before they’ve even received a single byte of HTML. The same issue applies to Skype for Business (Lync) and all of its web services (meet, dialin, lyncdiscover, scheduler, ucwa, …).&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;

&lt;p&gt;While writing a script that would call the website to be executed from a scheduled task, I happened across a technology called IIS Application Initialization. As explained by the documentation, “&lt;span&gt;The IIS 8.0 Application Initialization feature enables website administrators to configure IIS 8.0 to proactively perform initialization tasks for one or more web applications&lt;/span&gt;”.&lt;/p&gt;

&lt;p&gt;No need to document the steps required, it’s all here: &lt;a href=&quot;http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-application-initialization&quot; title=&quot;IIS 8.0 Application Initialization&quot;&gt;http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-application-initialization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when I visit this blog, even after an iisreset, it’s always warm and ready to go.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Next I turned my attention to Skype for Business and there are two warm up solutions that I have used, the original by &lt;a href=&quot;http://www.lynclog.com/2013/12/user-might-experince-delay-when-join.html&quot; title=&quot;User might experince delay when join Lync Online Meeting&quot;&gt;Drago Totev&lt;/a&gt; and the improved version by &lt;a href=&quot;https://greiginsydney.com/new-lyncmeetingwarmup/&quot; title=&quot;New-LyncMeetingWarmup&quot;&gt;Greig Sheridan&lt;/a&gt; however they both focus on just the meeting join URLs. &lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;script&quot;&gt;Script&lt;/h3&gt;

&lt;p&gt;The Powershell script will configure each of the Skype for Business or Lync application pools to be “Always running”. It will then iterate through each of the applications / virtual directories and set preload enabled. The script does not enable preload for CSCP, PowerShell remoting and legacy services like MCX. Tested on Windows Server 2012 and 2012 R2 with both Lync Server 2013 and Skype for Business Server 2015.&lt;/p&gt;

&lt;p&gt;It’s up to you to install the Application Initialization Windows feature as detailed in the &lt;a href=&quot;http://www.iis.net/learn/get-started/whats-new-in-iis-8/iis-80-application-initialization&quot; title=&quot;IIS 8.0 Application Initialization&quot;&gt;IIS documentation&lt;/a&gt; and do an iisreset.&lt;/p&gt;

&lt;p&gt;Whether you &lt;em&gt;should&lt;/em&gt; enable Application Initialization on your Skype for Business or Lync front-end servers… Well… Caveat emptor. IIS will use more memory but so long as you have more than 2.5GB free afterwards, then you should be fine.&lt;/p&gt;

&lt;p&gt;If this sounds too risky for you, perhaps stick with &lt;a href=&quot;https://greiginsydney.com/new-lyncmeetingwarmup/&quot; title=&quot;New-LyncMeetingWarmup&quot;&gt;Greig Sheridan’s&lt;/a&gt; solution.&lt;/p&gt;

&lt;h3 id=&quot;revision-history&quot;&gt;Revision History&lt;/h3&gt;

&lt;p&gt;v1.0: 13 Sep 2015: Initial Release&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Download &lt;a href=&quot;/assets/misc/set-csapplicationinitialization.zip&quot; title=&quot;Set-CsApplicationInitialization.zip&quot;&gt;Set-CsApplicationInitialization.ps1&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;

&lt;p&gt;New-LyncMeetingWarmup - &lt;a href=&quot;https://greiginsydney.com/new-lyncmeetingwarmup/&quot; title=&quot;New-LyncMeetingWarmup&quot;&gt;https://greiginsydney.com/new-lyncmeetingwarmup/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;User might experince delay when join Lync Online Meeting - &lt;a href=&quot;http://www.lynclog.com/2013/12/user-might-experince-delay-when-join.html&quot; title=&quot;User might experince delay when join Lync Online Meeting&quot;&gt;http://www.lynclog.com/2013/12/user-might-experince-delay-when-join.html&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Problem</summary></entry><entry><title type="html">VM Processor Configuration and SQL Server Express with Skype for Business (Lync)</title><link href="http://localhost:4000/vm-processor-configuration-sql-express-skype-for-business" rel="alternate" type="text/html" title="VM Processor Configuration and SQL Server Express with Skype for Business (Lync)" /><published>2015-09-01T00:00:00+10:00</published><updated>2015-09-01T00:00:00+10:00</updated><id>http://localhost:4000/vm-processor-configuration-sql-express-skype-for-business</id><content type="html" xml:base="http://localhost:4000/vm-processor-configuration-sql-express-skype-for-business">&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;
&lt;p&gt;While investigating an SQL issue with a customers Lync environment, discovered the following in the local SQL Express instance error logs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL Server detected 8 sockets with 1 cores per socket and 1 logical processors per socket, 8 total logical processors; using 1 logical processors based on SQL Server licensing. This is an informational message; no user action is required.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hmmm. That’s a little strange. You’re only using a single processor on a 8 core virtual machine.&lt;/p&gt;

&lt;p&gt;Quick check of the capacity limits of SQL Server Express:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-AU/library/ms143760(v=sql.120).aspx&quot; title=&quot;https://msdn.microsoft.com/en-AU/library/ms143760(v=sql.120).aspx&quot;&gt;https://msdn.microsoft.com/en-AU/library/ms143760(v=sql.120).aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Little bit confusing but I read “Limited to lesser of 1 Socket or 4 cores” to mean that SQL Server Express is limited to a single socket and no more than 4 cores.&lt;/p&gt;

&lt;p&gt;This customer had configured their VMware guest as a single socket per core based on this advice:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.vmware.com/vsphere/2013/10/does-corespersocket-affect-performance.html&quot; title=&quot;https://blogs.vmware.com/vsphere/2013/10/does-corespersocket-affect-performance.html&quot;&gt;https://blogs.vmware.com/vsphere/2013/10/does-corespersocket-affect-performance.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not usually a bad idea except when licensing restrictions require a different configuration.&lt;/p&gt;

&lt;h3 id=&quot;solution&quot;&gt;Solution&lt;/h3&gt;
&lt;p&gt;After a scheduled outage and some reconfiguration, our SQL Server Express instances have access to the expected number of cores:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SQL Server detected 2 sockets with 4 cores per socket and 4 logical processors per socket, 8 total logical processors; using 4 logical processors based on SQL Server licensing. This is an informational message; no user action is required.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Customer reports presence is being updated normally and SQL errors appear to have disappeared.&lt;/p&gt;</content><author><name></name></author><summary type="html">Problem While investigating an SQL issue with a customers Lync environment, discovered the following in the local SQL Express instance error logs:</summary></entry><entry><title type="html">Call Statistics from Sonus UX 1000/2000 using the RESTful API</title><link href="http://localhost:4000/call-statistics-sonus-ux-restful-api" rel="alternate" type="text/html" title="Call Statistics from Sonus UX 1000/2000 using the RESTful API" /><published>2015-08-06T00:00:00+10:00</published><updated>2015-08-06T00:00:00+10:00</updated><id>http://localhost:4000/call-statistics-sonus-ux-restful-api</id><content type="html" xml:base="http://localhost:4000/call-statistics-sonus-ux-restful-api">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Challenged to collect call statistics from our Sonus UX 1000 SBC the first thought was to use SNMP. After enabling SNMP and pointing an SNMPwalk tool with MIB to the SBC, I struggled to find anything useful that could be used by our monitoring software with its native SNMP sensor. Why taunt me with your call counters in the web administration interface and not expose them through SNMP?&lt;/p&gt;

&lt;p&gt;My colleagues have been using the Sonus UX REST API and PowerShell to load up configurations when deploying so thought I’d give it a go. Not much browsing time later and I had the API calls needed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CAS Signalling Group Resource - &lt;a href=&quot;https://support.sonus.net/display/UXAPIDOC/Resource+-+cassg&quot; title=&quot;Resource - cassg&quot;&gt;https://support.sonus.net/display/UXAPIDOC/Resource+-+cassg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ISDN Signalling Group Resource - &lt;a href=&quot;https://support.sonus.net/display/UXAPIDOC/Resource+-+isdnsg&quot; title=&quot;Resource - isdnsg&quot;&gt;https://support.sonus.net/display/UXAPIDOC/Resource+-+isdnsg&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SIP Signalling Group Resource - &lt;a href=&quot;https://support.sonus.net/display/UXAPIDOC/Resource+-+sipsg&quot; title=&quot;Resource - sipsg&quot;&gt;https://support.sonus.net/display/UXAPIDOC/Resource+-+sipsg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what I ended up with.&lt;/p&gt;

&lt;h3 id=&quot;the-script&quot;&gt;The Script&lt;/h3&gt;

&lt;p&gt;Nothing much to it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.\Get-SonusUxCallCounters.ps1 -Username &quot;restuser&quot; -Password &quot;restpassword&quot; -ServerFqdn &quot;sbc.contoso.com&quot; -Type SIP -Id 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Type can be SIP, ISDN or CAS.&lt;/p&gt;

&lt;h3 id=&quot;prtg&quot;&gt;PRTG&lt;/h3&gt;

&lt;p&gt;Choose the “EXE/Script Advanced” sensor type and fill in the settings:&lt;/p&gt;

&lt;div&gt;![](/assets/img/prtg.png)&lt;/div&gt;

&lt;p&gt;I’ve used the Linux username and password of the parent device to pass through the REST credentials.&lt;/p&gt;

&lt;p&gt;A little while later…&lt;/p&gt;

&lt;h3 id=&quot;stats&quot;&gt;Stats!&lt;/h3&gt;

&lt;div&gt;![](/assets/img/graph.png)&lt;/div&gt;

&lt;p&gt;Guess everyone went home around 5.30 :)&lt;/p&gt;

&lt;div&gt;![](/assets/img/table.png)&lt;/div&gt;

&lt;p&gt;That’ll keep the boss entertained.&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;Downoad &lt;a href=&quot;/assets/misc/get-sonusuxcallcounters.zip&quot; title=&quot;Get-SonusUxCallCounters.ps1&quot;&gt;Get-SonusUxCallCounters.ps1&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Presence using the Unified Communications Web API (UCWA)</title><link href="http://localhost:4000/presence-using-the-unified-communications-web-api" rel="alternate" type="text/html" title="Presence using the Unified Communications Web API (UCWA) " /><published>2015-08-05T00:00:00+10:00</published><updated>2015-08-05T00:00:00+10:00</updated><id>http://localhost:4000/presence-using-the-unified-communications-web-api</id><content type="html" xml:base="http://localhost:4000/presence-using-the-unified-communications-web-api">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Since Lync Server 2013 Cumulative Update 1 (February 2013), it has been possible to use the Unified Communications Web API (UCWA) to provide web-based communications interactions with Lync users. Microsoft provide a set of JavaScript helper libraries but unfortunately they have forgotten about those of us that have other non-web based ideas.&lt;/p&gt;

&lt;p&gt;This is my second attempt at working with UCWA and now the server side has been updated to Skype for Business.&lt;/p&gt;

&lt;p&gt;Before we can get presence from the Skype for Business (Lync) server, we need to create an application. Doing so requires five API calls to discover, authenticate and create an application. Once we have our application we can make it “available”  with another API call.&lt;/p&gt;

&lt;div&gt;![UCWA Authentication Workflow](/assets/jpg/ic673053.png)&lt;/div&gt;

&lt;p&gt;(from &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/office/dn356799.aspx&quot; title=&quot;Create an application&quot;&gt;https://msdn.microsoft.com/en-us/library/office/dn356799.aspx&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The steps are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Send a GET request on the Autodiscovery URL.&lt;/li&gt;
  &lt;li&gt;Send a GET request on the user URL, indicating that we want to authenticate as a user.&lt;/li&gt;
  &lt;li&gt;Send a POST request on the OAuth URL.&lt;/li&gt;
  &lt;li&gt;Send another GET request on the user resource, passing the OAuth token in the Authorization header of the request.&lt;/li&gt;
  &lt;li&gt;Send a POST request on the applications resource.&lt;/li&gt;
  &lt;li&gt;Send a GET request to the “makeMeAvailable” URL.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll be covering steps 2 to 6 as there is nothing special about the autodiscover URL.&lt;/p&gt;

&lt;h3 id=&quot;initialisation-code&quot;&gt;Initialisation Code&lt;/h3&gt;

&lt;p&gt;I’m using Caliburn.Micro and Autofac in my app meaning the constructor contains some IoC magic. The program flow is largely copied/ported from the Microsoft JavaScript helpers using the same state machine pattern.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using Caliburn.Micro;
using IotPresence.Models.Ucwa;
using IotPresence.Settings;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

internal class AuthenticationService : IAuthenticationService
{
	private readonly IEventAggregator eventAggregator;
	private readonly ISettingsRepository settingsRepository;
	private readonly IApplicationCache cache;

	private HttpClient httpClient;
	private int currentState = 0;
	private bool authenticated = false;
	private int authErrorCounter = 0;

	public AuthenticationService(IEventAggregator eventAggregator, ISettingsRepository settingsRepository, IApplicationCache cache)
	{
		this.eventAggregator = eventAggregator;
		this.settingsRepository = settingsRepository;
		this.cache = cache;

		this.httpClient = new HttpClient();
		httpClient.DefaultRequestHeaders.Accept.Clear();
		httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue(&quot;application/json&quot;));

		this.eventAggregator.Subscribe(this); // We need to publish Caliburn.Micro events
	}

	public async Task Start()
	{
		if (!String.IsNullOrEmpty(cache.UserUrl))
			await HandleState(new StateData(cache.UserUrl)).ConfigureAwait(false);
		else
			throw new InvalidOperationException(&quot;Unable to start authentication until auto discover process complete&quot;);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Prepare HttpClient for use. We’re dealing with JSON here but we could just as easily set the MIME type for XML.&lt;/li&gt;
  &lt;li&gt;Start our recursive state machine or throw an error if we haven’t been given a web service URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;state-machine&quot;&gt;State Machine&lt;/h3&gt;

&lt;h4 id=&quot;handlestate&quot;&gt;HandleState()&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private async Task HandleState(StateData data)
{
	bool success = ProcessStateData(data);

	if (success)
	{
		switch (currentState)
		{
			case 0:
				// Start Authentication
				await StartAuthentication(data);
				break;
			case 1:
				// Handle Authorization
				await HandleAuthorization(data);
				break;
			case 2:
				// Authenticate
				await Authenticate(data);
				break;
			case 3:
				// Create Application
				await CreateApplication(data);
				break;
			case 4:
				// Make me available
				await MakeMeAvailable(data);
				break;
			case 5:
				authenticated = true;
				break;
			default:
				break;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Pass our state to the ProcessStateData method and if everything is as we expect, we can call our handler methods&lt;/li&gt;
  &lt;li&gt;Note that I am not yet handling redirects and other edge cases like the Microsoft UCWA JavaScript helpers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;processstatedata&quot;&gt;ProcessStateData()&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private bool ProcessStateData(StateData data)
{
	if (data != null)
	{
		if (HandleRedirect(data))
			return false;

		if (data.StatusCode != null)
		{ 
			switch (data.StatusCode)
			{
				case HttpStatusCode.OK:
				case HttpStatusCode.Created:
				case HttpStatusCode.NoContent:
					// Intentional fall-through for all expected 2xx states
					currentState++;

					if (currentState == 3
						&amp;amp;&amp;amp; data.ApplicationsUrl == null)
						currentState = 3;

					break;
				case HttpStatusCode.Unauthorized:
					// 401 means it's time to supply credentials
					data.OAuthUrl = GetOAuthUrl(data.WwwAuthenticate);

					// Track how many failed authorize attempts occur
					if (currentState == 1)
						authErrorCounter++;
					else
						currentState++;
					break;
				case HttpStatusCode.BadRequest:
				case HttpStatusCode.NotFound:
					// Reset for either 400 or 404
					ResetState();
					return false;
				default:
					ResetState();
					return false;
			}
		}

		return true;
	}

	ResetState();
	return false;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;When the response from our web service call is a 2xx status code, we increment our state and move to the next step.&lt;/li&gt;
  &lt;li&gt;When we get challenged for authentication, we also move to the next step but keep a count of how many times we have been challenged. Not yet handled properly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;authenticate-all-the-internet-of-things&quot;&gt;Authenticate all the (Internet of) Things&lt;/h3&gt;

&lt;h4 id=&quot;startauthentication&quot;&gt;StartAuthentication()&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private async Task StartAuthentication(StateData data)
{
	var request = new HttpRequestMessage()
	{
		RequestUri = new Uri(data.UserUrl),
		Method = HttpMethod.Get
	};

	var response = await httpClient.SendAsync(request);

	data.StatusCode = response.StatusCode;
	data.WwwAuthenticate = response.Headers.WwwAuthenticate.ToString();

	await HandleState(data);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Make a request to the user URL, obtained using lyncdiscover, and get the authentication headers as this is where our OAuth URL is obtained.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;handleauthorization&quot;&gt;HandleAuthorization()&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private async Task HandleAuthorization(StateData data)
{
	var settings = settingsRepository.Read();

	var postData = new List&amp;gt;();
	postData.Add(new KeyValuePair(&quot;grant_type&quot;, &quot;password&quot;));
	postData.Add(new KeyValuePair(&quot;username&quot;, settings.UserName));
	postData.Add(new KeyValuePair(&quot;password&quot;, settings.Password));

	var request = new HttpRequestMessage()
	{
		RequestUri = new Uri(data.OAuthUrl),
		Method = HttpMethod.Post,
		Content = new FormUrlEncodedContent(postData)
	};

	var response = await httpClient.SendAsync(request);

	data.StatusCode = response.StatusCode;

	if (response.StatusCode == HttpStatusCode.OK)
	{
		var content = await response.Content.ReadAsStringAsync();
		var parsed = JObject.Parse(content);

		if (!this.authenticated)
		{
			data.UserToken = data.ApplicationToken = (string)(parsed[&quot;access_token&quot;] as JValue).Value;
			data.UserTokenType = data.ApplicationTokenType = (string)(parsed[&quot;token_type&quot;] as JValue).Value;
		}
		else
		{
			data.ApplicationToken = (string)(parsed[&quot;access_token&quot;] as JValue).Value;
			data.ApplicationTokenType = (string)(parsed[&quot;token_type&quot;] as JValue).Value;
		}

		// we need this externally
		this.cache.ApplicationToken = data.ApplicationToken;
		this.cache.ApplicationTokenType = data.ApplicationTokenType;
	}

	await HandleState(data);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Prepare authentication data to be posted. We’re using password authentication as I cannot see any of the other methods working from Windows 10 IoT.&lt;/li&gt;
  &lt;li&gt;Post data to the OAuth URL&lt;/li&gt;
  &lt;li&gt;Retrieve OAuth token for the user and application from JSON response.&lt;/li&gt;
  &lt;li&gt;Now that we have our OAuth token, we can  authenticate with UCWA in the next step.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;authenticate&quot;&gt;Authenticate()&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private async Task Authenticate(StateData data)
{
	var request = new HttpRequestMessage()
	{
		RequestUri = new Uri(data.UserUrl),
		Method = HttpMethod.Get
	};

	request.Headers.Authorization = new AuthenticationHeaderValue(data.UserTokenType, data.UserToken);

	var response = await httpClient.SendAsync(request);

	data.StatusCode = response.StatusCode;
	if (response.StatusCode == HttpStatusCode.OK)
	{
		var content = await response.Content.ReadAsStringAsync();
		var parsed = JObject.Parse(content);

		data.ApplicationsUrl = (string)(parsed[&quot;_links&quot;][&quot;applications&quot;].First as JProperty).Value;
	}

	await HandleState(data);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Authenticate to UCWA using the OAuth token from the previous step.&lt;/li&gt;
  &lt;li&gt;Retrieve the URL that will be used in the next step.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;createapplication&quot;&gt;CreateApplication()&lt;/h4&gt;

&lt;p&gt;We must register/create an application on the UCWA server so that we can call API functions or receive event notifications.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private async Task CreateApplication(StateData data)
{
	var postData = new
	{
		UserAgent = &quot;IotPresence&quot;,
		EndpointId = Guid.NewGuid().ToString(),
		Culture = &quot;en-US&quot;
	};
	var request = new HttpRequestMessage()
	{
		RequestUri = new Uri(data.ApplicationsUrl),
		Method = HttpMethod.Post,
		Content = new StringContent(JsonConvert.SerializeObject(postData), Encoding.UTF8, &quot;application/json&quot;)
	};

	if (CheckIfSameDomain(data.ApplicationsUrl, data.OAuthUrl))
		request.Headers.Authorization = new AuthenticationHeaderValue(data.ApplicationTokenType, data.ApplicationToken);

	var response = await httpClient.SendAsync(request);

	data.StatusCode = response.StatusCode;
	if (response.StatusCode == HttpStatusCode.Unauthorized)
	{
		// We are on a split-domain scenario. We need to re-authenticate with the new oauth url
		currentState = 1;
		data.WwwAuthenticate = response.Headers.WwwAuthenticate.ToString();
	}
	else if (response.StatusCode == HttpStatusCode.Created)
	{
		// New application created
		var content = await response.Content.ReadAsStringAsync();
		var parsed = JObject.Parse(content);

		// hoard this for later
		this.cache.BaseAddress = response.RequestMessage.RequestUri.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
		this.cache.Application = JsonConvert.DeserializeObject((parsed[&quot;_links&quot;]).ToString());
		this.cache.Me = JsonConvert.DeserializeObject((parsed[&quot;_embedded&quot;][&quot;me&quot;]).ToString());
		this.cache.People = JsonConvert.DeserializeObject((parsed[&quot;_embedded&quot;][&quot;people&quot;]).ToString());
		this.cache.OnlineMeetings = JsonConvert.DeserializeObject((parsed[&quot;_embedded&quot;][&quot;onlineMeetings&quot;]).ToString());
		this.cache.Communication = JsonConvert.DeserializeObject((parsed[&quot;_embedded&quot;][&quot;communication&quot;]).ToString());

		// Next step
		data.BaseAddress = this.cache.BaseAddress;
		data.MakeMeAvailableUri = this.cache.Me.Links.MakeMeAvailable.Href;
	}

	await HandleState(data);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Prepare our application details to be posted to the application URL.&lt;/li&gt;
  &lt;li&gt;Post the application details serialized as JSON.&lt;/li&gt;
  &lt;li&gt;If our application URL and OAuth URL are the same domain, then we can send our OAuth token as the authentication header.&lt;/li&gt;
  &lt;li&gt;If the Application URL and OAuth URL domain do not match, then we expect to get challenged to authenticate again and reset the state machine back.&lt;/li&gt;
  &lt;li&gt;When the application is created, we deserialise the data returned and cache it for our application to use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;makemeavailable&quot;&gt;MakeMeAvailable()&lt;/h4&gt;

&lt;p&gt;We need this step so that we can receive events. When I left this step out, there was much head scratching.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private async Task MakeMeAvailable(StateData data)
{
	if (!this.authenticated)
	{
		string[] modalities = new string[] { };
		var postData = new
		{
			SupportedModalities = modalities
		};

		var request = new HttpRequestMessage()
		{
			RequestUri = new Uri(String.Format(&quot;{0}{1}&quot;, data.BaseAddress, data.MakeMeAvailableUri)),
			Method = HttpMethod.Post,
			Content = new StringContent(JsonConvert.SerializeObject(postData), Encoding.UTF8, &quot;application/json&quot;)
		};

		if (CheckIfSameDomain(data.ApplicationsUrl, data.OAuthUrl))
			request.Headers.Authorization = new AuthenticationHeaderValue(data.ApplicationTokenType, data.ApplicationToken);

		var response = await httpClient.SendAsync(request);
		data.StatusCode = response.StatusCode;

		await HandleState(data);
	}
	else
	{
		data.StatusCode = HttpStatusCode.NoContent;
		await HandleState(data);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Prepare list of supported modalities. In my case it is blank as I’m only interested in the users presence.&lt;/li&gt;
  &lt;li&gt;Post serialised data to “MakeMeAvailable” URI.&lt;/li&gt;
  &lt;li&gt;Recursive call to HandleState.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo&lt;/h3&gt;

&lt;p&gt;A quick video of the authentication service used to get Skype for Business (Lync) presence from the server (with Events) using a Raspberry Pi 2 with Windows 10 IoT.&lt;/p&gt;

&lt;iframe class=&quot;col-sm-12&quot; height=&quot;333&quot; allowfullscreen=&quot;allowfullscreen&quot; src=&quot;https://www.youtube.com/embed/9MhUzSouJgs?wmode=transparent&quot; frameborder=&quot;0&quot; wmode=&quot;Opaque&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/assets/misc/authenticationservice.zip&quot;&gt;UCWA Authentication Service&lt;/a&gt; (C#)&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Windows 10 IoT and Adafruit LPD8806 RGB LED Strip</title><link href="http://localhost:4000/windows-10-iot-adafruit-lpd8806-rgb-led-strip" rel="alternate" type="text/html" title="Windows 10 IoT and Adafruit LPD8806 RGB LED Strip" /><published>2015-07-22T00:00:00+10:00</published><updated>2015-07-22T00:00:00+10:00</updated><id>http://localhost:4000/windows-10-iot-adafruit-lpd8806-rgb-led-strip</id><content type="html" xml:base="http://localhost:4000/windows-10-iot-adafruit-lpd8806-rgb-led-strip">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;I got one metre of the &lt;a href=&quot;http://www.adafruit.com/product/306&quot; title=&quot;DIGITAL RGB LED WEATHERPROOF STRIP - LPD8806 32 LED&quot;&gt;Adafruit LPD8806 RGB LED strip&lt;/a&gt; with a &lt;a href=&quot;http://www.netduino.com/netduinoplus2/&quot; title=&quot;Netduino Plus 2&quot;&gt;NetDuino Plus 2&lt;/a&gt; many years ago with bold visions of colourful Christmas decorations on the front of the house. After some success with blinding myself, they were forgotten about when child #1 arrived. The NetDuino suffered the same fate as it couldn’t talk HTTPS.&lt;/p&gt;

&lt;p&gt;When Microsoft announced they would support Windows 10 IoT on the new Raspberry Pi 2, the wheels started turning again.&lt;/p&gt;

&lt;p&gt;The code is a shameless hack job of the &lt;a href=&quot;http://netduinohelpers.codeplex.com/&quot; title=&quot;netduino Helpers&quot;&gt;netduino helpers&lt;/a&gt; project on CodePlex. I’ve stripped it down to just setting static colours across all of the LED’s. I am not planning any animations yet.&lt;/p&gt;

&lt;h3 id=&quot;hardware&quot;&gt;Hardware&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Raspberry Pi 2 Model B - &lt;a href=&quot;http://au.element14.com/raspberry-pi/raspberrypi-2-modb-1gb/sbc-raspberry-pi-2-model-b-1gb/dp/2461030&quot; title=&quot;RASPBERRYPI-2-MODB-1GB&quot;&gt;Element 14&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;2A Micro-USB power supply - &lt;a href=&quot;http://au.element14.com/pro-power/psu-raspberry-pi-2a-5v/psu-raspberry-pi-5v-2a-micro-usb/dp/2444596&quot; title=&quot;PSU-RASPBERRY-PI-2A-5V&quot;&gt;Element 14&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Micro SD card for Windows 10 IoT - &lt;a href=&quot;http://www.scorptec.com.au/product/Flash_Memory/Micro_SD_Cards/55778-MB-MG32DA_APC&quot; title=&quot;Samsung PRO Micro SDHC 32GB SD Card&quot;&gt;Scorptec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;LPD8806-based RGB LED strip - &lt;a href=&quot;http://www.adafruit.com/product/306&quot; title=&quot;Digital RGB LED Weatherproof Strip&quot;&gt;Adafruit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;5V 10A power supply - &lt;a href=&quot;http://www.adafruit.com/products/658&quot; title=&quot;5V 10A switching power supply&quot;&gt;Adafruit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Female DC Power adapter - &lt;a href=&quot;http://www.adafruit.com/products/368&quot; title=&quot;Female DC Power adapter&quot;&gt;Adafruit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jumper wires&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;wiring&quot;&gt;Wiring&lt;/h3&gt;

&lt;p&gt;Already had wires soldiered to the LED strip from previous experiments (&lt;a href=&quot;https://learn.adafruit.com/digital-led-strip/wiring&quot; title=&quot;Digital RGB LED Strip Wiring&quot;&gt;Adafruit tutorial&lt;/a&gt;), so all I needed was the &lt;a href=&quot;https://ms-iot.github.io/content/en-US/win10/samples/PinMappingsRPi2.htm&quot; title=&quot;Raspberry Pi 2 Pin Mappings&quot;&gt;Raspberry Pi 2 pinout diagram&lt;/a&gt; on the &lt;a href=&quot;http://go.microsoft.com/fwlink/p/?LinkID=534186&quot; title=&quot;Windows IoT Home&quot;&gt;Windows IoT site&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Connect the black ground (GND) to any ground PIN of the RPi2 - I used 39.&lt;/li&gt;
  &lt;li&gt;Connect the yellow clock (CI) to the SPI0 SCLK (PIN 23) of the RPi2.&lt;/li&gt;
  &lt;li&gt;Connect the green data wire (DI) to the SPI0 MOSI (PIN 19) of the RPi2.&lt;/li&gt;
  &lt;li&gt;Connect the red +5V power wire to your power supply.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;initialisation-code&quot;&gt;Initialisation Code&lt;/h3&gt;

&lt;p&gt;Here is the C# code for the top-level constructor and initialisation function. Have had to move SPI initialisation to its own method so we can handle the async calls.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class AdaFruitLPD8806 : IDisposable
{
    private const int bytesPerPixel = 3;

    private SpiDevice spi;
    private int pixelCount;
    private int frameSize;
    private int pixelBufferEnd;
    private byte[] pixelBuffer;
    private bool disposed = false;

    protected byte[] backgroundColor = new byte[bytesPerPixel];
    protected byte[] attentionSequence = new byte[] { 0, 0, 0, 0 };
    protected byte[] latchSequence = new byte[] { 0, 0, 0 };

    public AdaFruitLPD8806(int width, int height, string spiControllerName = &quot;SPI0&quot;, Int32 spiChipSelectLine = 0, int clockFrequency = 10000000)
    {
        this.Width = width;
        this.Height = height;
        this.pixelCount = width * height;
        this.pixelBufferEnd = (pixelCount - 1) * bytesPerPixel;
        this.frameSize = width * height * bytesPerPixel;
        this.SpiControllerName = spiControllerName;
        this.SpiChipSelectLine = spiChipSelectLine;
        this.ClockFrequency = clockFrequency;

        pixelBuffer = new byte[pixelCount * bytesPerPixel];
    }

    private int Width { get; set; }
    private int Height { get; set; }
    private string SpiControllerName { get; set; }
    private Int32 SpiChipSelectLine { get; set; }
    private int ClockFrequency { get; set; }

    public async Task Initialize()
    {
        try
        {
            await InitSpi();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(&quot;Exception : {0}&quot;, ex);
        }

        pixelBuffer = new byte[pixelCount * bytesPerPixel];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Set up some variables and constants that describe the RGB LED strip.&lt;/li&gt;
  &lt;li&gt;The Raspberry Pi 2 SPI port needs initialisation so we call the InitSpi() method.&lt;/li&gt;
  &lt;li&gt;If the initialisation fails we can handle the error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we take a closer look at the SPI initialisation function.&lt;/p&gt;

&lt;h4 id=&quot;initspi&quot;&gt;InitSpi()&lt;/h4&gt;

&lt;p&gt;The SPI bus on the Raspberry Pi 2 is used to send a byte array of encoded RGB levels for each of the LEDs on the string and needs to be configured before we can use it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private async Task InitSpi()
{
    try
    {
        var settings = new SpiConnectionSettings(this.SpiChipSelectLine);           /* Create SPI initialization settings */
        settings.ClockFrequency = this.ClockFrequency;                              /* Datasheet specifies maximum SPI clock frequency of 10MHz */
        settings.Mode = SpiMode.Mode0;                                              /* Not sure. Worked for me */

        string spiAqs = SpiDevice.GetDeviceSelector(this.SpiControllerName);        /* Find the selector string for the SPI bus controller */
        var devicesInfo = await DeviceInformation.FindAllAsync(spiAqs);             /* Find the SPI bus controller device with our selector string */
        this.spi = await SpiDevice.FromIdAsync(devicesInfo[0].Id, settings);        /* Create an SpiDevice with our bus controller and SPI settings */
    }
    catch (Exception ex)
    {
        Debug.WriteLine(&quot;Exception : {0}&quot;, ex);
        throw new InvalidOperationException(&quot;SPI Initialization Failed&quot;, ex);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Start by specifying some SPI configuration settings that I don’t fully understand. 10MHz sounds good right?&lt;/li&gt;
  &lt;li&gt;More device discovery.&lt;/li&gt;
  &lt;li&gt;Create the SpiDevice using the settings and bus controller.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;all-the-colours&quot;&gt;All The Colours&lt;/h3&gt;

&lt;p&gt;Now that the SPI device is initialised, we can send some bytes to our LED strip. We only need two functions to do most of the work.&lt;/p&gt;

&lt;h4 id=&quot;setcolor&quot;&gt;SetColor()&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Sets the color of the entire strip
public void SetColor(byte red, byte green, byte blue)
{
    SetBackgroundColor(redGamma[red], greenGamma[green], blueGamma[blue]);
    for (var pixel = 0; pixel &amp;lt; frameSize; pixel += bytesPerPixel)
    {
        Array.Copy(backgroundColor, 0, pixelBuffer, pixel, bytesPerPixel);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;We first set up our “Background” array with each of our 8-bit colour values. We use the gamma dictionary lookup (RedGamma, GreenGamma, BlueGamma) so the colours look “correct” and to convert the 8-bit colour in to the 7-bit colour supported by the LPD8806 chip.&lt;/li&gt;
  &lt;li&gt;Next, we copy the background colour array over to our pixel buffer that will be written to SPI in the Refresh() method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;refresh&quot;&gt;Refresh()&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Send the internal pixel buffer to the strip
public void Refresh()
{
    if (spi == null)
        return;

    spi.Write(attentionSequence);
    spi.Write(pixelBuffer);
    var ledLatchCount = pixelCount * 2;
    for (var i = 0; i &amp;lt; ledLatchCount; i++)
    {
        spi.Write(latchSequence);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;No spi means we have not yet called Initialize&lt;/li&gt;
  &lt;li&gt;Adafruit LPD8806 strip requires a set of “attention” bytes before writing out our pixel buffer.&lt;/li&gt;
  &lt;li&gt;Write our pixel buffer.&lt;/li&gt;
  &lt;li&gt;Latch written bytes by sending zeros to each pixel (* 2).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pretty&quot;&gt;Pretty&lt;/h3&gt;

&lt;p&gt;Took a flash photo and forgot about the Raspberry Pi 2’s kryptonite. Windows IoT failed hard. Need to get a Pi case.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/lpd8806-pi.jpg&quot; alt=&quot;Raspberry Pi2 LPD8806&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A basic XAML GUI with Caliburn.Micro and Autofac.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/lpd8806-ui.jpg&quot; alt=&quot;Windows IoT&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;My &lt;a href=&quot;/assets/misc/adafruitlpd8806.zip&quot; title=&quot;AdaFruitLPD8806.zip&quot;&gt;scrappy LPD8806 class&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry><entry><title type="html">Skype for Business (Lync) device DHCP for Cisco IOS</title><link href="http://localhost:4000/skype-for-business-lync-dhcp-for-cisco-ios" rel="alternate" type="text/html" title="Skype for Business (Lync) device DHCP for Cisco IOS" /><published>2015-07-18T00:00:00+10:00</published><updated>2015-07-18T00:00:00+10:00</updated><id>http://localhost:4000/skype-for-business-lync-dhcp-for-cisco-ios</id><content type="html" xml:base="http://localhost:4000/skype-for-business-lync-dhcp-for-cisco-ios">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;While designing a Skype for Business deployment for a customer, a requirement was discovered that meant we would need to provide a DHCP configuration to their WAN vendor. Each of the sites would be using Polycom VVX devices with IP addresses obtained from a Cisco router.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://neillpert.wordpress.com/2011/11/30/configuring-a-cisco-isr861s-dhcp-service-for-lync-edition-handsets/&quot; title=&quot;Configuring a Cisco ISR861’s DHCP Service for Lync Edition Handset&quot;&gt;Neill Pert describes the process&lt;/a&gt; of taking output from DHCPUtil and massaging to a usable format but wouldn’t it be nice if we didn’t have to mess around with concatenating strings and counting lengths?&lt;/p&gt;

&lt;p&gt;Introducing my first non-commercial contribution to the internets: Get-CsCiscoIosDhcp.ps1&lt;/p&gt;

&lt;h3 id=&quot;creating-the-configuration&quot;&gt;Creating the Configuration&lt;/h3&gt;

&lt;p&gt;Fire up PowerShell and run the script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.\Get-CsCiscoIosDhcp.ps1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script will then ask for DHCP options needed for a successful Lync Phone Edition/Qualified deployment with PIN authentication:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DNS suffix (eg. contoso.local): contoso.local
UTC/GMT Offset Hours (eg. +/-10): 10
NTP server address (eg. 192.168.0.1): 192.168.0.254
NTP server address (eg. 192.168.0.1): 
DNS search domain (eg. contoso.local): contoso.local
DNS search domain (eg. contoso.local): contoso.com
DNS search domain (eg. contoso.local):
SfB/Lync SIP FQDN (eg. sip.contoso.com): sip.contoso.com
SfB/Lync Web FQDN (eg. lyncwebint.contoso.com): sip.contoso.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Done:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-------------------------------------------------------
Cisco IOS DHCP configuration for the following values :
-------------------------------------------------------
DNS suffix : contoso.local
Time Offset : 10
NTP Servers : 192.168.0.254
DNS Search List : contoso.local contoso.com
SIP Server : sip.contoso.com
Web Server : sip.contoso.com
-------------------------------------------------------
domain-name &quot;contoso.local&quot;
option 2 hex 00008ca0
option 42 ip 192.168.0.254
option 119 hex 07636f6e746f736f056c6f63616c0007636f6e746f736f03636f6d00
option 120 hex 000373697007636f6e746f736f03636f6d00
option 43 hex 010c4d532d55432d436c69656e7402056874747073030f7369702e636f6e746f736f2e636f6d040334343305252f4365727450726f762f4365727450726f766973696f6e696e67536572766963652e737663
-------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;revision-history&quot;&gt;Revision History&lt;/h3&gt;

&lt;p&gt;v0.1: 19 July 2015: Initial release&lt;/p&gt;

&lt;h3 id=&quot;download&quot;&gt;Download&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;/assets/misc/get-csciscoiosdhcp.zip&quot; title=&quot;Download&quot;&gt;Download Get-CsCiscoIosDhcp.ps1&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;credits&quot;&gt;Credits&lt;/h3&gt;

&lt;p&gt;Configuring a Cisco ISR861’s DHCP Service for Lync Edition Handset - &lt;a href=&quot;https://neillpert.wordpress.com/2011/11/30/configuring-a-cisco-isr861s-dhcp-service-for-lync-edition-handsets/&quot; title=&quot;Configuring a Cisco ISR861’s DHCP Service for Lync Edition Handset&quot;&gt;https://neillpert.wordpress.com/2011/11/30/configuring-a-cisco-isr861s-dhcp-service-for-lync-edition-handsets/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cisco support community post by Michael Solomonides describing option 119 - &lt;a href=&quot;https://supportforums.cisco.com/discussion/11213696/dhcp-pool-dns-search-list-option-119&quot;&gt;https://supportforums.cisco.com/discussion/11213696/dhcp-pool-dns-search-list-option-119&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Setting Up DHCP for Devices - &lt;a href=&quot;https://technet.microsoft.com/en-us/library/gg398369(v=ocs.14).aspx&quot; title=&quot;Setting Up DHCP for Devices&quot;&gt;https://technet.microsoft.com/en-us/library/gg398369(v=ocs.14).aspx&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry></feed>